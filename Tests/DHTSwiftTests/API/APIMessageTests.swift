//
//  APIMessageTests.swift
//  DHTSwiftTests
//
//  Created by Lars Schwegmann on 11.06.19.
//

import XCTest
import Foundation
@testable import DHTSwift

class APIMessageTests: XCTestCase {

    // MARK: Comparison objects

    let dhtPutObject = DHTPut(ttl: 0xFF,
                                 replication: 0x00,
                                 reserved: 0xab,
                                 key:
        [
            0x01, 0x02, 0x03, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0a, 0x0b, 0x0c,
            0x0d, 0x0e, 0x0f, 0x10,
            0x11, 0x12, 0x13, 0x14,
            0x15, 0x16, 0x17, 0x18,
            0x19, 0x1a, 0x1b, 0x1c,
            0x1d, 0x1e, 0x1f, 0x20
        ],
                                 value:
        [
            0x01, 0x02, 0x03, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0a, 0x0b, 0x0c,
            0x0d, 0x0e, 0x0f, 0x10,
            0x11, 0x12, 0x13, 0x14,
            0x15, 0x16, 0x17, 0x18,
            0x19, 0x1a, 0x1b, 0x1c,
            0x1d, 0x1e, 0x1f, 0x20
        ])
    let dhtPutBytes: [UInt8] = [
        0x00, 0x48, // Size == 72
        0x02, 0x8a, // Message Type ID == 650
        0x00, 0xFF, // TTL
        0x00,       // Replication == 0
        0xab,       // Reserved = 0xab
        0x01, 0x02, 0x03, 0x04, // Key
        0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c,
        0x0d, 0x0e, 0x0f, 0x10,
        0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c,
        0x1d, 0x1e, 0x1f, 0x20,
        0x01, 0x02, 0x03, 0x04, // Value
        0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c,
        0x0d, 0x0e, 0x0f, 0x10,
        0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c,
        0x1d, 0x1e, 0x1f, 0x20
    ]

    let dhtGetObject = DHTGet(key: [
        0x01, 0x02, 0x03, 0x04,
        0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c,
        0x0d, 0x0e, 0x0f, 0x10,
        0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c,
        0x1d, 0x1e, 0x1f, 0x20
        ])
    let dhtGetBytes: [UInt8] = [
        0x00, 0x24, // Size = 34
        0x02, 0x8b,  // Message Type Id = 651
        0x01, 0x02, 0x03, 0x04, // Key
        0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c,
        0x0d, 0x0e, 0x0f, 0x10,
        0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c,
        0x1d, 0x1e, 0x1f, 0x20
    ]

    let dhtSuccessObject = DHTSuccess(key:
        [
            0x01, 0x02, 0x03, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0a, 0x0b, 0x0c,
            0x0d, 0x0e, 0x0f, 0x10,
            0x11, 0x12, 0x13, 0x14,
            0x15, 0x16, 0x17, 0x18,
            0x19, 0x1a, 0x1b, 0x1c,
            0x1d, 0x1e, 0x1f, 0x20
        ], value:
        [
            0x01, 0x02, 0x03, 0x04,
            0x05, 0x06, 0x07, 0x08,
            0x09, 0x0a, 0x0b, 0x0c,
            0x0d, 0x0e, 0x0f, 0x10,
            0x11, 0x12, 0x13, 0x14,
            0x15, 0x16, 0x17, 0x18,
            0x19, 0x1a, 0x1b, 0x1c,
            0x1d, 0x1e, 0x1f, 0x20
        ])
    let dhtSuccessBytes: [UInt8] = [
        0x00, 0x44, // Size = 68
        0x02, 0x8c,  // Message Type Id = 652
        0x01, 0x02, 0x03, 0x04, // Key
        0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c,
        0x0d, 0x0e, 0x0f, 0x10,
        0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c,
        0x1d, 0x1e, 0x1f, 0x20,
        0x01, 0x02, 0x03, 0x04, // Value
        0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c,
        0x0d, 0x0e, 0x0f, 0x10,
        0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c,
        0x1d, 0x1e, 0x1f, 0x20
    ]

    let dhtFailureObject = DHTFailure(key: [
        0x01, 0x02, 0x03, 0x04,
        0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c,
        0x0d, 0x0e, 0x0f, 0x10,
        0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c,
        0x1d, 0x1e, 0x1f, 0x20
        ])
    let dhtFailureBytes: [UInt8] = [
        0x00, 0x24, // Size = 34
        0x02, 0x8d,  // Message Type Id = 653
        0x01, 0x02, 0x03, 0x04, // Key
        0x05, 0x06, 0x07, 0x08,
        0x09, 0x0a, 0x0b, 0x0c,
        0x0d, 0x0e, 0x0f, 0x10,
        0x11, 0x12, 0x13, 0x14,
        0x15, 0x16, 0x17, 0x18,
        0x19, 0x1a, 0x1b, 0x1c,
        0x1d, 0x1e, 0x1f, 0x20
    ]

    // MARK: Tests

    func testPutSerialization() {
        let put = dhtPutObject
        let bytes = put.getBytes()
        let expectedBytes: [UInt8] = dhtPutBytes
        XCTAssertEqual(bytes, expectedBytes)
    }

    func testPutDeserialization() {
        let bytes: [UInt8] =  dhtPutBytes
        let put = DHTPut.fromBytes(bytes)
        XCTAssertNotNil(put)
        let expectedPut = dhtPutObject
        XCTAssertEqual(put!, expectedPut)
    }

    func testGetSerialization() {
        let get = dhtGetObject
        let bytes = get.getBytes()
        let expectedBytes: [UInt8] = dhtGetBytes
        XCTAssertEqual(bytes, expectedBytes)
    }

    func testGetDeserialization() {
        let bytes: [UInt8] =  dhtGetBytes
        let get = DHTGet.fromBytes(bytes)
        XCTAssertNotNil(get)
        let expectedGet = dhtGetObject
        XCTAssertEqual(get!, expectedGet)
    }

    func testSuccessSerialization() {
        let success = dhtSuccessObject
        let bytes = success.getBytes()
        let expectedBytes: [UInt8] = dhtSuccessBytes
        XCTAssertEqual(bytes, expectedBytes)
    }

    func testSuccessDeserialization() {
        let bytes: [UInt8] =  dhtSuccessBytes
        let success = DHTSuccess.fromBytes(bytes)
        XCTAssertNotNil(success)
        let expectedSuccess = dhtSuccessObject
        XCTAssertEqual(success!, expectedSuccess)
    }

    func testFailureSerialization() {
        let failure = dhtFailureObject
        let bytes = failure.getBytes()
        let expectedBytes: [UInt8] = dhtFailureBytes
        XCTAssertEqual(bytes, expectedBytes)
    }

    func testFailureDeserialization() {
        let bytes: [UInt8] =  dhtFailureBytes
        let failure = DHTFailure.fromBytes(bytes)
        XCTAssertNotNil(failure)
        let expectedFailure = dhtFailureObject
        XCTAssertEqual(failure!, expectedFailure)
    }

    static var allTests = [
        ("putSerialization", testPutSerialization),
        ("putDeserialization", testPutDeserialization)
    ]
}
